openapi: "3.0.0"

info:
  title: TSTORE
  description: t-shtore backend api
  version: 0.1.9

servers:
  - url: http://localhost:4000/api/v1
    description: Api version 1

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

paths:
  /signup:
    post:
      summary: Create user
      tags:
        - User
      description: Creates the new user and registeres it into db.
      requestBody:
        description: Takes input of name, email, password and photo of user
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                photo:
                  type: string
                  format: binary

      responses:
        "201": # status code
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: ["user", "admin", "manager"]
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
        "400": # status code
          description: Bad request

  /login:
    post:
      summary: Log in a user
      tags:
        - User
      requestBody:
        description: Takes input of email & password.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string

      responses:
        "200": # status code
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: ["user", "admin", "manager"]
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
        "400": # status code
          description: Unable to log in

  /logout:
    get:
      summary: Log out the user and delete the cookies
      tags:
        - User
      parameters:
        - in: cookie
          name: token
          schema:
            type: string
          required: true
      responses:
        "200": # status code
          description: User Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: cookie deleted successfully

        "400": # status code
          description: Unable to log in

  /userdashboard:
    get:
      summary: Returns the details of the user
      tags:
        - User
      parameters:
        - in: cookie
          name: token
          schema:
            type: string
          required: true
      responses:
        "200": # status code
          description: Successfully returns the details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: ["user", "admin", "manager"]
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string

        "400": # status code
          description: Unable to log in

        "401": # status code
          description: User need to log in first.
          content:
            application/json:
            schema:
              type: object
              properties:
                error:
                  type: string
                  example: You need to log in first to access this route.

  /forgotpassword:
    post:
      summary: Send reset password e-mail to the user.
      tags:
        - User
      requestBody:
        description: Takes email as input.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string

      responses:
        "200": # status code
          description: Successfully sent the reset mail to user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email sent check your mail box.

        "400": # status code
          description: Unable to forgot password.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: unable to forgot password. Retry .
        "404": # status code
          description: User not found in database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found.

  /password/reset/{token}:
    post:
      summary: Take input of new password and update it.
      tags:
        - User
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
      requestBody:
        description: Takes new password as input.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string

      responses:
        "200": # status code
          description: Successfully sent the reset mail to user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: ["user", "admin", "manager"]
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string

        "400": # status code
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid token or token has expired.

  /password/update:
    post:
      summary: Update the user password.
      tags:
        - User
      parameters:
        - in: cookie
          name: token
          schema:
            type: string
          required: true
      requestBody:
        description: Takes new password as input.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  type: string
                  required: true
                confirmPassword:
                  type: string
                  format: password
                  required: true

      responses:
        "200": # status code
          description: Successfully Updated password
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: ["user", "admin", "manager"]
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string

        "400": # status code
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Incorrect User password.

  /userdashboard/update:
    post:
      summary: Update the user details like name, email, photo.
      tags:
        - User
      parameters:
        - in: cookie
          name: token
          schema:
            type: string
          required: true
      requestBody:
        description: Take fields to update.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                photo:
                  type: string
                  format: binary

      responses:
        "200": # status code
          description: Successfully Updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: ["user", "admin", "manager"]
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string

        "400": # status code
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Incorrect User password.

        "401": # status code
          description: User need to log in first.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You need to log in first to access this route.

  # ! Admin Routes

  /admin/users:
    get:
      summary: Get all users.
      tags:
        - Admin
      parameters:
        - in: cookie
          name: token
          schema:
            type: string
          required: true

      responses:
        "200": # status code
          description: Got all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    success:
                      type: boolean
                    token:
                      type: string
                    user:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                          enum: ["user", "admin", "manager"]
                        photo:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
        "400": # status code
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Incorrect User password.

        "401": # status code
          description: User need to log in first.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You need to log in first to access this route.

  /admin/users/{id}:
    get:
      summary: Get all users.
      tags:
        - Admin
      parameters:
        - in: cookie
          name: token
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true

      responses:
        "200": # status code
          description: Returns the details of the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: ["user", "admin", "manager"]
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string

        "400": # status code
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unable to the get user.

        "401": # status code
          description: User need to log in first.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You need to log in first to access this route.

        "403": # status code
          description: Only admin can access this resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You are not authirized to use this resource.

    put:
      summary: Update User's detail.
      tags:
        - Admin
      parameters:
        - in: cookie
          name: token
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Take fields to update.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                role:
                  type: string
                  enum: ["user", "admin", "manager"]
                  default: user
                photo:
                  type: string
                  format: binary

      responses:
        "200": # status code
          description: Returns the details of the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: ["user", "admin", "manager"]
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string

        "400": # status code
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unable update the user.

        "401": # status code
          description: User need to log in first.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You need to log in first to access this route.

        "403": # status code
          description: Only admin can access this resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You are not authirized to use this resource.

    delete:
      summary: Admin deletes the User.
      tags:
        - Admin
      parameters:
        - in: cookie
          name: token
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true

      responses:
        "200": # status code
          description: Returns the deleted user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: ["user", "admin", "manager"]
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string

        "400": # status code
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unable to delete the user.

        "401": # status code
          description: User need to log in first.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You need to log in first to access this route.

        "403": # status code
          description: Only admin can access this resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You are not authirized to use this resource.

  # ! Manager Routes
  /manager/users:
    get:
      summary: Returns all the users.
      tags:
        - Manager
      parameters:
        - in: cookie
          name: token
          schema:
            type: string
          required: true

      responses:
        "200": # status code
          description: Successfully returns all the users.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    success:
                      type: boolean
                    token:
                      type: string
                    user:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                          enum: ["user", "admin", "manager"]
                        photo:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string

        "400": # status code
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unable to find the users.

        "401": # status code
          description: User need to log in first.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You need to log in first to access this route.

        "403": # status code
          description: Only admin can access this resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You are not authirized to use this resource.
